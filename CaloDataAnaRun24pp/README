First commit: Anthony Hodges, ahodges4@illinois.edu, May 17th, 2024

Update July 1st, 2024: Updated trigger vector to scaled trigger vector
Update August 6th, 2024: Added Process_calo_calib() to fun4all macro and added python script for generating run list. 

TO GENERATE GOOD RUN LIST (Do this in a "runList" directory, there will be a lot of file lists!):
$ cd macro
$ python getGoodRunlist.py
$ CreateDstList.pl --cdb 2024p004 --build new --list runList.txt DST_CALO_run2pp

Note that this is implemented using p004 above, but you'll need to follow the production developments and possibly change this tag to get more recent runs. 
---------------------------------------------------------------------------------------------------------------------------

In spite of the title, this is a general-purpose calorimeter analysis module
designed to grab data from a DST and store into nTuples, it should work in any collision system:)
In its inception it works on the EMCal, EMCal clusters, HCal, ZDC, SMD, and GL1. The only caveat
is that as of May 15th, 2024, the ZDC is undergoing a slight change to its channel mapping, 
so an update will undoubtedly be necessary. Here are the necessary steps to get everything running
Note, all cd's assume you're in the top directory (where you can see 'src' 'macros' and 'scripts')

#Building:
cd src
mkdir build
$PWD/../autogen.sh --prefix=$MYINSTALL #this should be your unique installation directory
make install -j8 

#Generating file lists:
#This is your long term solution, take a peak inside the script for more information
cd macros 
mkdir fileLists
cd fileLists
../getGoodRunlist.py

This will create a file list of all runs marked GOLDEN in the run database with over a million events. 
Then, you can feed this to CreateDstList.pl (which is a console command, nothing to load) via:
$ CreateDstList.pl --cdb 2024p004 --build new --list runList.txt DST_CALO_run2pp


#Running the code (with just an example run, there's nothing special about it)!
#Also note this will spit out a "commissioning.root" file, which is the default argument for the filename
#This is a good test to make sure everything's running, but try running over a few thousand events
#or more for better statistics
cd macros
root -l -b -q Fun4All_CaloTreeGen.C'(0,"DST_CALO_run2pp_new_2024p004-00048089-00018.root","commissioning.root","ProdA_2024")'

And this will actually run out of the box upon successful install. 

#Note in the macro you can tell it to not read out information for subsytems you don't need
#For instance
calo -> doHCals(1,"TOWERINFO_CALIB_HCALOUT","TOWERINFO_CALIB_HCALIN");
#Change this to
calo -> doHCals(0,"TOWERINFO_CALIB_HCALOUT","TOWERINFO_CALIB_HCALIN");
#Means you won't get hcal information anymore

#Make a quick plot! Let's check out tower energies!
root -l commissioning.root
T -> Draw("emcTowE"); //emcal
T -> Draw("ohcTowE"); //ohcal
T -> Draw("ihcTowE"); //ihcal

#Cluster information
T -> Draw("clusterE");
T -> Draw("clusterChi2");
#Show me the energy spectrum for clusters whose shower profile is very Electromagnetic
T -> Draw("clusterE","clusterChi2 < 2");
#Show me the energy spectrum for clusters whose maximum tower contains >90% of the cluster energy
T -> Draw("clusterECore","clusterTowMaxE/ClusterECore > 0.9")

Now you can try reconstruction some neutral pions (and maybe some etas, depending on how many events you processed) with
root -l makePhotonPairs.C
